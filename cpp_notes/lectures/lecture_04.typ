#import "../../templates/notes_template.typ": page_settings

#let lecture_4(doc) = [
  = Лекция 4.
  == Этот конспект не завешен.
  == Функции.
  Программы на C++ выглядят, как множество функций, которые друг друга вызывают, поэтому фактически невозможно запустить код вне функций.\
  Уже знакомая нам функция --- `main`. Программа запускает ее автоматически, а в конце получает от нее: успешно ли выполнилась программа.
  #parbreak()
  Очевидно, создавать можно и свои функции. Рассмотрим пример:
  ```cpp
  int add(int a, int b) {
    return a + b;
  }
  ```
  Сначала задается тип возращаемого результата функции, после -- название, а наконец аргументы, каждый с своим типом данных. Каждая функция заканчивается ключевым словом `return`, который возвращает значение функции.\
  Команда `return` не обязятельно должна стоять в самом конце кода функции. Например, их можно поставить несколько, некоторые в середину
  ```cpp
  int add(int a, int b) {
    if (a == 0 && b == 0){
      return 0;
    }
    return a + b;
  }
  ```
  Важно помнить, что на `return` функция возвращает свое значение и заканчивает выполнение.
  #parbreak()
  Есть функции, которые ничего не возвращают:
  ```cpp
  void foo() {
    std::cout << "nothing" << std::endl;
  }
  ```
  Вызываются функции любые функции одинаково:
  ```cpp
  int main() {
    std::cout << add(1, 2) << std::endl;
    std::cout << add(3, 3) << std::endl;

    foo();
    foo();
  }
  ```
  #linebreak()
  На самом деле, функция `main` тоже принимает аргументы...\
  TODO
  #pagebreak(weak: true)
  #doc
]

#show: page_settings
#show: lecture_4
